----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\BlogApplication.java -----
package com.example.blog;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BlogApplication {

    public static void main(String[] args) {
        SpringApplication.run(BlogApplication.class, args);
    }

}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\config\SecurityConfig.java -----
package com.example.blog.config;

import com.example.blog.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
// Import other necessary packages
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import java.util.Collections;

@Configuration
public class SecurityConfig {

    @Autowired
    private UserRepository userRepository;

    @Bean
    public UserDetailsService userDetailsService(){
        return new UserDetailsService(){
            @Override
            public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
                com.example.blog.model.User user = userRepository.findByEmail(email)
                        .orElseThrow(() -> new UsernameNotFoundException("User not found"));
                return new org.springframework.security.core.userdetails.User(
                        user.getEmail(),
                        user.getPassword(),
                        Collections.singleton(new SimpleGrantedAuthority("ROLE_USER"))
                );
            }
        };
    }

    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/register", "/login", "/css/**", "/uploads/**").permitAll()
                        .requestMatchers("/posts/create", "/posts/*/edit").authenticated()
                        .anyRequest().authenticated()
                )
                .formLogin(form -> form
                        .loginPage("/login")
                        .defaultSuccessUrl("/", true)
                        .permitAll()
                )
                .logout(LogoutConfigurer::permitAll)
                .exceptionHandling(exception -> exception
                        .accessDeniedPage("/access-denied")
                );
        return http.build();
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\config\WebConfig.java -----
package com.example.blog.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

/**
 * This configuration class maps an external (configurable) upload directory
 * to the /uploads/ path so that images can be served at runtime.
 */
@Configuration
public class WebConfig implements WebMvcConfigurer {

    /**
     * This property should be defined in application.properties as:
     *   app.upload.dir=/absolute/path/to/folder
     */
    @Value("${app.upload.dir}")
    private String uploadDir;

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry
                .addResourceHandler("/uploads/**")
                .addResourceLocations("file:" + uploadDir + "/");
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\controller\AuthController.java -----
package com.example.blog.controller;

import com.example.blog.model.User;
import com.example.blog.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import jakarta.validation.Valid;

@Controller
public class AuthController {

    private final UserService userService;

    @Autowired
    public AuthController(UserService userService){
        this.userService = userService;
    }

    @GetMapping("/register")
    public String showRegistrationForm(Model model){
        model.addAttribute("user", new User());
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@Valid User user, BindingResult result, Model model){
        if(result.hasErrors()){
            return "register";
        }
        if(userService.findByEmail(user.getEmail()).isPresent()){
            model.addAttribute("error", "Email already registered");
            return "register";
        }
        userService.registerUser(user);
        return "redirect:/login";
    }

    @GetMapping("/login")
    public String showLoginForm(){
        return "login";
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\controller\CommentController.java -----
package com.example.blog.controller;

import com.example.blog.model.Comment;
import com.example.blog.model.Post;
import com.example.blog.model.User;
import com.example.blog.service.CommentService;
import com.example.blog.service.PostService;
import com.example.blog.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;

@Controller
public class CommentController {

    private final CommentService commentService;
    private final PostService postService;
    private final UserRepository userRepository;

    @Autowired
    public CommentController(CommentService commentService,
                             PostService postService,
                             UserRepository userRepository) {
        this.commentService = commentService;
        this.postService = postService;
        this.userRepository = userRepository;
    }

    @PostMapping("/posts/{id}/comments")
    public String addComment(@PathVariable Long id,
                             @RequestParam String content,
                             Authentication authentication) {
        // Fix: Retrieve the email from the principal, then look up our custom User entity
        String email = authentication.getName();
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        Post post = postService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + id));

        Comment comment = Comment.builder()
                .content(content)
                .createdAt(LocalDateTime.now())
                .post(post)
                .user(user)
                .build();

        commentService.save(comment);
        return "redirect:/posts/" + id;
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\controller\PostController.java -----
package com.example.blog.controller;

import com.example.blog.model.Post;
import com.example.blog.model.Reaction;
import com.example.blog.model.User;
import com.example.blog.service.PostService;
import com.example.blog.service.ReactionService;
import com.example.blog.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Controller
public class PostController {

    private final PostService postService;
    private final ReactionService reactionService;
    private final UserRepository userRepository;

    /**
     * Read the upload directory from application.properties:
     *   app.upload.dir=C:/Users/ALLMIGHTY/Desktop/AccessoDatos/blog-uploads
     */
    @Value("${app.upload.dir}")
    private String uploadDir;

    @Autowired
    public PostController(PostService postService,
                          ReactionService reactionService,
                          UserRepository userRepository) {
        this.postService = postService;
        this.reactionService = reactionService;
        this.userRepository = userRepository;
    }

    @GetMapping("/")
    public String home(Model model) {
        List<Post> posts = postService.findAll();
        model.addAttribute("posts", posts);
        return "home";
    }

    @GetMapping("/posts/create")
    public String showCreatePostForm(Model model) {
        model.addAttribute("post", new Post());
        return "create_post";
    }

    @PostMapping("/posts/create")
    public String createPost(@ModelAttribute Post post,
                             @RequestParam("imageFile") MultipartFile imageFile,
                             Authentication authentication,
                             RedirectAttributes redirectAttributes) {

        String email = authentication.getName();
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        post.setAuthor(user);
        post.setCreatedAt(LocalDateTime.now());

        // Handle image upload if present
        if (!imageFile.isEmpty()) {
            try {
                // Ensure the configured upload directory exists
                File uploadFolder = new File(uploadDir);
                if (!uploadFolder.exists()) {
                    uploadFolder.mkdirs();
                }

                // Generate a unique filename
                String originalFilename = imageFile.getOriginalFilename();
                String extension = "";
                if (originalFilename != null && originalFilename.contains(".")) {
                    extension = originalFilename.substring(originalFilename.lastIndexOf('.'));
                }
                String uniqueFilename = UUID.randomUUID().toString() + extension;

                // Save the file to the disk in the configured upload directory
                File destinationFile = Paths.get(uploadDir, uniqueFilename).toFile();
                imageFile.transferTo(destinationFile);

                // Store the path (or filename) in the Post so it can be accessed at /uploads/{uniqueFilename}
                post.setImagePath("/uploads/" + uniqueFilename);

            } catch (IOException e) {
                e.printStackTrace();
                redirectAttributes.addFlashAttribute("error", "Failed to upload image.");
                return "redirect:/posts/create";
            }
        }

        postService.save(post);
        redirectAttributes.addFlashAttribute("success", "Post created successfully!");
        return "redirect:/";
    }

    @GetMapping("/posts/{id}")
    public String viewPost(@PathVariable Long id, Model model,
                           @RequestParam(value = "error", required = false) String error) {
        Post post = postService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + id));

        long likeCount = reactionService.countByPostAndType(post, "LIKE");
        long dislikeCount = reactionService.countByPostAndType(post, "DISLIKE");

        model.addAttribute("post", post);
        model.addAttribute("comments", post.getComments());
        model.addAttribute("likeCount", likeCount);
        model.addAttribute("dislikeCount", dislikeCount);
        model.addAttribute("error", error);

        return "view_post";
    }

    @PostMapping("/posts/{id}/react")
    public String reactToPost(@PathVariable Long id,
                              @RequestParam String type,
                              Authentication authentication,
                              RedirectAttributes redirectAttributes) {

        String email = authentication.getName();
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        Post post = postService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + id));

        Optional<Reaction> existingReaction = reactionService.findByUserAndPost(user, post);
        if (existingReaction.isPresent()) {
            // Update existing reaction
            Reaction reaction = existingReaction.get();
            reaction.setType(type);
            reactionService.save(reaction);
        } else {
            // Create new reaction
            Reaction reaction = Reaction.builder()
                    .user(user)
                    .post(post)
                    .type(type)
                    .build();
            reactionService.save(reaction);
        }

        return "redirect:/posts/" + id;
    }

    // ----- Edit Functionality -----

    @GetMapping("/posts/{id}/edit")
    public String showEditPostForm(@PathVariable Long id, Model model,
                                   Authentication authentication, RedirectAttributes redirectAttributes) {

        Post post = postService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + id));

        // Ensure that only the author can edit the post
        String email = authentication.getName();
        if (!post.getAuthor().getEmail().equals(email)) {
            redirectAttributes.addFlashAttribute("error", "You are not authorized to edit this post.");
            return "redirect:/posts/" + id;
        }

        model.addAttribute("post", post);
        return "edit_post";
    }

    @PostMapping("/posts/{id}/edit")
    public String editPost(@PathVariable Long id,
                           @ModelAttribute Post updatedPost,
                           @RequestParam("imageFile") MultipartFile imageFile,
                           Authentication authentication,
                           RedirectAttributes redirectAttributes) {

        Post existingPost = postService.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + id));

        // Ensure that only the author can edit the post
        String email = authentication.getName();
        if (!existingPost.getAuthor().getEmail().equals(email)) {
            redirectAttributes.addFlashAttribute("error", "You are not authorized to edit this post.");
            return "redirect:/posts/" + id;
        }

        existingPost.setTitle(updatedPost.getTitle());
        existingPost.setContent(updatedPost.getContent());

        // Handle new image upload if present
        if (imageFile != null && !imageFile.isEmpty()) {
            try {
                File uploadFolder = new File(uploadDir);
                if (!uploadFolder.exists()) {
                    uploadFolder.mkdirs();
                }

                String originalFilename = imageFile.getOriginalFilename();
                String extension = "";
                if (originalFilename != null && originalFilename.contains(".")) {
                    extension = originalFilename.substring(originalFilename.lastIndexOf('.'));
                }
                String uniqueFilename = UUID.randomUUID().toString() + extension;

                // Save the new file
                File destinationFile = Paths.get(uploadDir, uniqueFilename).toFile();
                imageFile.transferTo(destinationFile);

                // Optionally delete the old image if it exists
                if (existingPost.getImagePath() != null) {
                    // The old image path might look like "/uploads/old-uuid.png"
                    // We must remove the leading slash and combine it with the uploadDir
                    String oldImageName = existingPost.getImagePath().replace("/uploads/", "");
                    File oldImage = new File(uploadDir, oldImageName);
                    if (oldImage.exists()) {
                        oldImage.delete();
                    }
                }

                // Update the image path
                existingPost.setImagePath("/uploads/" + uniqueFilename);

            } catch (IOException e) {
                e.printStackTrace();
                redirectAttributes.addFlashAttribute("error", "Failed to upload new image.");
                return "redirect:/posts/" + id + "/edit";
            }
        }

        try {
            postService.save(existingPost);
            redirectAttributes.addFlashAttribute("success", "Post updated successfully!");
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("error", "An error occurred while updating the post.");
        }

        return "redirect:/posts/" + id;
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\model\Comment.java -----
package com.example.blog.model;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "comments")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Comment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(columnDefinition = "TEXT")
    private String content;

    private LocalDateTime createdAt;

    // Relationships
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "post_id")
    private Post post;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\model\Post.java -----
package com.example.blog.model;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.Set;

@Entity
@Table(name = "posts")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Post {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @Column(columnDefinition = "TEXT")
    private String content;

    private LocalDateTime createdAt;

    private String imagePath;

    // Relationships
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "author_id")
    private User author;

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Comment> comments;

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Reaction> reactions;
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\model\Reaction.java -----
package com.example.blog.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "reactions", uniqueConstraints = {@UniqueConstraint(columnNames = {"user_id", "post_id"})})
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Reaction {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String type; // e.g., "LIKE", "DISLIKE"

    // Relationships
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "post_id")
    private Post post;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\model\User.java -----
package com.example.blog.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.Set;

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;

    private String name;

    // Relationships
    @OneToMany(mappedBy = "author", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Post> posts;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Comment> comments;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Reaction> reactions;
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\repository\CommentRepository.java -----
package com.example.blog.repository;

import com.example.blog.model.Comment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CommentRepository extends JpaRepository<Comment, Long> {
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\repository\PostRepository.java -----
package com.example.blog.repository;

import com.example.blog.model.Post;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PostRepository extends JpaRepository<Post, Long> {
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\repository\ReactionRepository.java -----
package com.example.blog.repository;

import com.example.blog.model.Reaction;
import com.example.blog.model.User;
import com.example.blog.model.Post;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface ReactionRepository extends JpaRepository<Reaction, Long> {
    Optional<Reaction> findByUserAndPost(User user, Post post);

    // Count how many likes or dislikes a post has
    long countByPostAndType(Post post, String type);
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\repository\UserRepository.java -----
package com.example.blog.repository;

import com.example.blog.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\service\CommentService.java -----
package com.example.blog.service;

import com.example.blog.model.Comment;
import com.example.blog.repository.CommentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class CommentService {

    private final CommentRepository commentRepository;

    @Autowired
    public CommentService(CommentRepository commentRepository){
        this.commentRepository = commentRepository;
    }

    public Comment save(Comment comment){
        return commentRepository.save(comment);
    }

    public Optional<Comment> findById(Long id){
        return commentRepository.findById(id);
    }

    public void deleteById(Long id){
        commentRepository.deleteById(id);
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\service\PostService.java -----
package com.example.blog.service;

import com.example.blog.model.Post;
import com.example.blog.repository.PostRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class PostService {

    private final PostRepository postRepository;

    @Autowired
    public PostService(PostRepository postRepository){
        this.postRepository = postRepository;
    }

    public List<Post> findAll(){
        return postRepository.findAll();
    }

    public Optional<Post> findById(Long id){
        return postRepository.findById(id);
    }

    public Post save(Post post){
        return postRepository.save(post);
    }

    public void deleteById(Long id){
        postRepository.deleteById(id);
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\service\ReactionService.java -----
package com.example.blog.service;

import com.example.blog.model.Reaction;
import com.example.blog.model.User;
import com.example.blog.model.Post;
import com.example.blog.repository.ReactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class ReactionService {

    private final ReactionRepository reactionRepository;

    @Autowired
    public ReactionService(ReactionRepository reactionRepository){
        this.reactionRepository = reactionRepository;
    }

    public Optional<Reaction> findByUserAndPost(User user, Post post){
        return reactionRepository.findByUserAndPost(user, post);
    }

    public Reaction save(Reaction reaction){
        return reactionRepository.save(reaction);
    }

    // Count how many likes or dislikes a post has
    public long countByPostAndType(Post post, String type) {
        return reactionRepository.countByPostAndType(post, type);
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\java\com\example\blog\service\UserService.java -----
package com.example.blog.service;

import com.example.blog.model.User;
import com.example.blog.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder){
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User registerUser(User user){
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    public Optional<User> findByEmail(String email){
        return userRepository.findByEmail(email);
    }
}


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\access-denied.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Access Denied</title>
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="/">Blogio</a>
        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto me-4">
                <li class="nav-item" th:if="${#authentication.principal != null}">
                    <a class="nav-link" href="/posts/create">Create Post</a>
                </li>
                <li class="nav-item" th:if="${#authentication.principal != null}">
                    <form th:action="@{/logout}" method="post" class="d-inline">
                        <button type="submit" class="btn btn-link nav-link">Logout</button>
                    </form>
                </li>
                <li class="nav-item" th:if="${#authentication.principal == null}">
                    <a class="nav-link" href="/login">Login</a>
                </li>
                <li class="nav-item" th:if="${#authentication.principal == null}">
                    <a class="nav-link" href="/register">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="container py-5">
    <div class="text-center">
        <h1 class="display-4 text-danger">Access Denied</h1>
        <p class="lead">You do not have permission to access this page.</p>
        <a href="/" class="btn btn-primary mt-3">Go to Home</a>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\create_post.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Create Post</title>
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="/">Blogio</a>
        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto me-4">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <form th:action="@{/logout}" method="post" class="d-inline">
                        <button type="submit" class="btn btn-link nav-link">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </button>
                    </form>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="container py-4">
    <!-- Flash Messages -->
    <div th:if="${success}" class="alert alert-success" th:text="${success}"></div>
    <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>

    <h2>Create New Post</h2>
    <form th:action="@{/posts/create}" th:object="${post}" method="post" enctype="multipart/form-data" class="mt-3">
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" th:field="*{title}" class="form-control" id="title" placeholder="Enter post title" required/>
        </div>
        <div class="mb-3">
            <label for="content" class="form-label">Content</label>
            <textarea th:field="*{content}" class="form-control" id="content" rows="7" placeholder="Write your post here..." required></textarea>
        </div>
        <div class="mb-3">
            <label for="imageFile" class="form-label">Image (Optional)</label>
            <input type="file" class="form-control" id="imageFile" name="imageFile" accept="image/*" />
            <div class="form-text">Supported formats: JPG, PNG, GIF. Max size: 5MB.</div>
        </div>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-paper-plane"></i> Publish
        </button>
        <a href="/" class="btn btn-secondary">Cancel</a>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\edit_post.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Edit Post</title>
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="/">Blogio</a>
        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto me-4">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <form th:action="@{/logout}" method="post" class="d-inline">
                        <button type="submit" class="btn btn-link nav-link">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </button>
                    </form>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="container py-4">
    <!-- Flash Messages -->
    <div th:if="${success}" class="alert alert-success" th:text="${success}"></div>
    <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>

    <h2>Edit Post</h2>
    <form th:action="@{'/posts/' + ${post.id} + '/edit'}" th:object="${post}" method="post" enctype="multipart/form-data" class="mt-3">
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" th:field="*{title}" class="form-control" id="title" placeholder="Update post title" required/>
        </div>
        <div class="mb-3">
            <label for="content" class="form-label">Content</label>
            <textarea th:field="*{content}" class="form-control" id="content" rows="7" placeholder="Update your post here..." required></textarea>
        </div>
        <div class="mb-3">
            <label class="form-label">Current Image</label>
            <div th:if="${post.imagePath != null}" class="mb-3">
                <img th:src="${post.imagePath}" alt="Current Image" class="img-fluid post-image-full"/>
            </div>
            <label for="imageFile" class="form-label">Change Image (Optional)</label>
            <input type="file" class="form-control" id="imageFile" name="imageFile" accept="image/*" />
            <div class="form-text">Uploading a new image will replace the current one.</div>
        </div>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-paper-plane"></i> Update
        </button>
        <a th:href="@{'/posts/' + ${post.id}}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\home.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Home</title>
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="/">Blogio</a>
        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto me-4">
                <li class="nav-item" th:if="${#authentication.principal != null}">
                    <a class="nav-link" href="/posts/create">
                        <i class="fas fa-pen"></i> Create Post
                    </a>
                </li>
                <li class="nav-item" th:if="${#authentication.principal != null}">
                    <form th:action="@{/logout}" method="post" class="d-inline">
                        <button type="submit" class="btn btn-link nav-link">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </button>
                    </form>
                </li>
                <li class="nav-item" th:if="${#authentication.principal == null}">
                    <a class="nav-link" href="/login">
                        <i class="fas fa-sign-in-alt"></i> Login
                    </a>
                </li>
                <li class="nav-item" th:if="${#authentication.principal == null}">
                    <a class="nav-link" href="/register">
                        <i class="fas fa-user-plus"></i> Register
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="container py-4">
    <!-- Flash Messages -->
    <div th:if="${success}" class="alert alert-success" th:text="${success}"></div>
    <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>

    <h2 class="mb-4">All Posts</h2>
    <div th:if="${#lists.isEmpty(posts)}">
        <p>No posts yet. Be the first to create one!</p>
    </div>
    <div th:each="post : ${posts}" class="post-card">
        <div class="post-content">
            <h5 class="post-title" th:text="${post.title}">Post Title</h5>
            <p class="text-muted">
                By <strong th:text="${post.author.name}">Author</strong>
                &bull;
                <span th:text="${#dates.format(post.createdAt, 'dd MMM yyyy HH:mm')}">Date</span>
            </p>
            <p class="post-excerpt" th:text="${#strings.abbreviate(post.content, 150)}">Post content...</p>
            <a th:href="@{'/posts/' + ${post.id}}" class="btn btn-primary read-more-btn">
                <i class="fas fa-book-open"></i> Read More
            </a>
        </div>
        <div>
            <img th:src="${post.imagePath}" alt="Post Image" class="post-image" th:if="${post.imagePath != null}"/>
        </div>
    </div>
</div>
<footer class="footer text-center">
    <div class="container">
        <span>&copy; 2025 Blogio. All rights reserved.</span>
    </div>
</footer>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\login.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Login</title>
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">
<div class="container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card p-4 shadow" style="min-width: 300px;">
        <h2 class="card-title">Login</h2>
        <!-- Flash Messages -->
        <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>
        <div th:if="${success}" class="alert alert-success" th:text="${success}"></div>
        <form th:action="@{/login}" method="post" class="mt-3">
            <div class="mb-3">
                <label for="username" class="form-label">Email</label>
                <input type="text" class="form-control" id="username" name="username" required/>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required/>
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
            <a href="/register" class="btn btn-link mt-2">Register</a>
        </form>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\register.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Register</title>
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">
<div class="container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card p-4 shadow" style="min-width: 300px;">
        <h2 class="card-title">Register</h2>
        <!-- Flash Messages -->
        <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>
        <div th:if="${success}" class="alert alert-success" th:text="${success}"></div>
        <form th:action="@{/register}" th:object="${user}" method="post" class="mt-3">
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" th:field="*{email}" class="form-control" id="email" required/>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" th:field="*{name}" class="form-control" id="name" required/>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" th:field="*{password}" class="form-control" id="password" required/>
            </div>
            <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>
            <button type="submit" class="btn btn-primary w-100">Register</button>
            <a href="/login" class="btn btn-link mt-2">Login</a>
        </form>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\templates\view_post.html -----
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title th:text="${post.title}">Post Title</title>
    <!-- Bootstrap & Custom CSS -->
    <link href="/css/styles.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="bg-light">

<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="/">Blogio</a>
        <button class="navbar-toggler" type="button"
                data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto me-4">
                <li class="nav-item" th:if="${#authentication.principal != null}">
                    <a class="nav-link" href="/posts/create">
                        <i class="fas fa-pen"></i> Create Post
                    </a>
                </li>
                <li class="nav-item" th:if="${#authentication.principal != null}">
                    <form th:action="@{/logout}" method="post" class="d-inline">
                        <button type="submit" class="btn btn-link nav-link">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </button>
                    </form>
                </li>
                <li class="nav-item" th:if="${#authentication.principal == null}">
                    <a class="nav-link" href="/login">
                        <i class="fas fa-sign-in-alt"></i> Login
                    </a>
                </li>
                <li class="nav-item" th:if="${#authentication.principal == null}">
                    <a class="nav-link" href="/register">
                        <i class="fas fa-user-plus"></i> Register
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container py-4">
    <!-- Flash Messages -->
    <div th:if="${success}" class="alert alert-success" th:text="${success}"></div>
    <div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>

    <div class="card mb-4">
        <div class="card-body">
            <h2 class="view-post-title" th:text="${post.title}">Post Title</h2>
            <p class="view-post-meta">
                By <strong th:text="${post.author.name}">Author</strong>
                &bull;
                <span th:text="${#dates.format(post.createdAt, 'dd MMM yyyy HH:mm')}">Date</span>
            </p>
            <hr/>
            <!-- Image -->
            <div th:if="${post.imagePath != null}" class="mb-4">
                <img th:src="${post.imagePath}" alt="Post Image" class="post-image-full"/>
            </div>
            <!-- Content -->
            <p class="view-post-content" th:text="${post.content}">Post Content</p>

            <!-- Edit Button -->
            <div th:if="${#authentication.principal.username == post.author.email}" class="mb-4">
                <a th:href="@{'/posts/' + ${post.id} + '/edit'}" class="btn btn-warning">
                    <i class="fas fa-edit"></i> Edit Post
                </a>
            </div>

            <!-- Reactions -->
            <div class="mb-4">
                <form th:action="@{'/posts/' + ${post.id} + '/react'}" method="post" class="d-inline">
                    <input type="hidden" name="type" value="LIKE"/>
                    <button type="submit" class="btn btn-success me-2">
                        <i class="fas fa-thumbs-up"></i> Like
                    </button>
                </form>
                <form th:action="@{'/posts/' + ${post.id} + '/react'}" method="post" class="d-inline">
                    <input type="hidden" name="type" value="DISLIKE"/>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-thumbs-down"></i> Dislike
                    </button>
                </form>
                <!-- Display like/dislike counts -->
                <div class="mt-2">
                    <span class="badge bg-success me-1">Likes:
                        <span th:text="${likeCount}">0</span>
                    </span>
                    <span class="badge bg-danger">Dislikes:
                        <span th:text="${dislikeCount}">0</span>
                    </span>
                </div>
            </div>

            <hr/>

            <!-- Comments Section -->
            <h4>Comments (<span th:text="${#lists.size(comments)}">0</span>)</h4>
            <div th:if="${#lists.isEmpty(comments)}">
                <p>No comments yet. Be the first to comment!</p>
            </div>
            <div th:each="comment : ${comments}" class="comment-card">
                <p class="comment-content" th:text="${comment.content}">Comment content...</p>
                <p class="comment-author" th:text="${comment.user.name}">User</p>
                <p class="comment-date" th:text="${#dates.format(comment.createdAt, 'dd MMM yyyy HH:mm')}">Date</p>
            </div>

            <!-- Add a Comment -->
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Add a Comment</h5>
                    <form th:action="@{'/posts/' + ${post.id} + '/comments'}" method="post">
                        <div class="mb-3">
                            <textarea name="content" class="form-control" rows="3" placeholder="Your comment here..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit Comment</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<footer class="footer text-center">
    <div class="container">
        <span>&copy; 2025 Blogio. All rights reserved.</span>
    </div>
</footer>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


----- C:\Users\ALLMIGHTY\Desktop\AccessoDatos\blog\src\main\resources\static\css\styles.css -----
/* General Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
}

/* Navbar Styles */
.navbar-brand {
    font-size: 1.75rem;
    color: #343a40 !important;
}

.nav-link {
    font-size: 1rem;
    color: #343a40 !important;
}

.nav-link:hover {
    color: #0d6efd !important;
}

/* Home Page - Post Card Styles */
.post-card {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    background-color: #ffffff;
    border-radius: 8px;
    overflow: hidden;
}

.post-card:hover {
    transform: translateY(-5px);
    transition: transform 0.3s;
}

.post-content {
    padding: 1.5rem;
    flex: 1;
}

.post-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #343a40;
}

.post-excerpt {
    font-size: 1rem;
    color: #6c757d;
    margin-bottom: 1.5rem;
}

.read-more-btn {
    font-size: 0.9rem;
    padding: 0.5rem 1rem;
}

.post-image {
    width: 40%;
    max-height: 200px;
    object-fit: cover;
}

@media (max-width: 768px) {
    .post-card {
        flex-direction: column;
    }

    .post-image {
        width: 100%;
        max-height: 250px;
    }
}

/* View Post Page */
.view-post-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #343a40;
}

.view-post-meta {
    font-size: 0.9rem;
    color: #6c757d;
    margin-bottom: 1.5rem;
}

.view-post-content {
    font-size: 1.1rem;
    color: #343a40;
    line-height: 1.6;
    margin-bottom: 2rem;
}

.post-image-full {
    width: 100%;
    max-height: 500px;
    object-fit: cover;
    margin-bottom: 2rem;
    border-radius: 8px;
}

/* Comment Section */
.comment-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    background-color: #ffffff;
}

.comment-author {
    font-weight: 600;
    color: #343a40;
}

.comment-date {
    font-size: 0.85rem;
    color: #6c757d;
}

.comment-content {
    margin-top: 0.5rem;
    font-size: 1rem;
    color: #495057;
}

/* Form Styles */
form .form-control {
    border-radius: 4px;
}

form .btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

form .btn-primary:hover {
    background-color: #0b5ed7;
    border-color: #0a58ca;
}

/* Flash Messages */
.alert-success {
    background-color: #d1e7dd;
    color: #0f5132;
}

.alert-danger {
    background-color: #f8d7da;
    color: #842029;
}

/* Footer Styles */
.footer {
    background-color: #343a40;
    color: #ffffff;
    padding: 1rem 0;
    position: fixed;
    width: 100%;
    bottom: 0;
}

.footer a {
    color: #0d6efd;
    text-decoration: none;
}

.footer a:hover {
    text-decoration: underline;
}


